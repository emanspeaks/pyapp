from pathlib import Path
from keyword import iskeyword

from pyapp.utils.stack import top_package_dir_path
from pyapp.gui.icons.qiconfont.sources import THIRDPARTY_FONTSPEC
from pyapp.gui.icons.qiconfont.fontspec import (
    ICON_ASSETS_DIR, THIRDPARTY_DIR, QIconFontSpec
)

SCRIPTPATH = Path(__file__)
HERE = SCRIPTPATH.parent
NAMES_PY = 'names.py'
PYAPP_DIR = top_package_dir_path('pyapp')
PYAPP_ROOT = PYAPP_DIR.parent
SCRIPT_RELPATH = SCRIPTPATH.relative_to(PYAPP_ROOT)
AUTOHEADER = f'# This file is auto-generated by {SCRIPT_RELPATH.as_posix()}  # noqa: E501\n# Do not edit.\n'  # noqa: E501


def update_from_spec():
    ICON_ASSETS_DIR.mkdir(exist_ok=True)

    for fontmod, fontspec in THIRDPARTY_FONTSPEC.items():
        fontspec.initialize(fontmod, ICON_ASSETS_DIR)
        relmodname = fontspec.relative_module_qualname
        modparts = relmodname.split('.')

        levels = 1
        p = THIRDPARTY_DIR
        for part in modparts:
            levels += 1
            p /= part
            p.mkdir(exist_ok=True)
            init = p/'__init__.py'
            init.touch()

        generate_init(p, levels, fontspec)
        generate_names(p, fontspec)


def generate_init(p: Path, levels: int, fontspec: QIconFontSpec):
    init = p/'__init__.py'
    s = str(AUTOHEADER)
    s += f'from {'.'*levels}.qiconfont import QIconFont, IconCache\n'
    s +=  '\n'  # noqa: E222
    s +=  '\n'  # noqa: E222
    s += f'class {fontspec.classname}(QIconFont):\n'
    s += f'    _SPECNAME = {fontspec.target_relative_class_qualname!r}\n'
    s +=  '    _ICON_CACHE: IconCache = dict()\n'  # noqa: E222
    init.write_text(s)


def generate_names(p: Path, fontspec: QIconFontSpec):
    outf = p/NAMES_PY
    s = str(AUTOHEADER)
    for k, v in fontspec.charmap.items():
        newname = k.replace('-', '_')
        if iskeyword(newname):
            newname += '_'

        if newname[0].isdigit():
            newname = f'_{newname}'

        if newname == "l":
            newname = "L"

        line = f"{newname} = {v}"
        if len(line) > 79:
            line += "  # noqa: E501"

        s += f"{line}\n"

    outf.write_text(s)


if __name__ == "__main__":
    update_from_spec()
